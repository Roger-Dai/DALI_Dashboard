{
  "_args": [
    [
      {
        "raw": "nwsapi@^2.0.7",
        "scope": null,
        "escapedName": "nwsapi",
        "name": "nwsapi",
        "rawSpec": "^2.0.7",
        "spec": ">=2.0.7 <3.0.0",
        "type": "range"
      },
      "/Users/daitianxing/Documents/Main/Dartmouth/DALI/dashboard/node_modules/jsdom"
    ]
  ],
  "_from": "nwsapi@^2.0.7",
  "_hasShrinkwrap": false,
  "_id": "nwsapi@2.1.0",
  "_location": "/nwsapi",
  "_nodeVersion": "10.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nwsapi_2.1.0_1549255356813_0.32693772857624004"
  },
  "_npmUser": {
    "name": "diego",
    "email": "diego.perini@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nwsapi@^2.0.7",
    "scope": null,
    "escapedName": "nwsapi",
    "name": "nwsapi",
    "rawSpec": "^2.0.7",
    "spec": ">=2.0.7 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jsdom"
  ],
  "_resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.1.0.tgz",
  "_shasum": "781065940aed90d9bb01ca5d0ce0fcf81c32712f",
  "_shrinkwrap": null,
  "_spec": "nwsapi@^2.0.7",
  "_where": "/Users/daitianxing/Documents/Main/Dartmouth/DALI/dashboard/node_modules/jsdom",
  "author": {
    "name": "Diego Perini",
    "email": "diego.perini@gmail.com",
    "url": "http://www.iport.it/"
  },
  "bugs": {
    "url": "http://github.com/dperini/nwsapi/issues"
  },
  "dependencies": {},
  "description": "Fast CSS Selectors API Engine",
  "devDependencies": {
    "eslint": "^4.19.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZG3bLAvdHmhIjaQ/Db1qvBxsGvFMLIRpQszyqbg31VJ53UP++uZX1/gf3Ut96pdwN9AuDwlMqIYLm0UPCdUeHg==",
    "shasum": "781065940aed90d9bb01ca5d0ce0fcf81c32712f",
    "tarball": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.1.0.tgz",
    "fileCount": 8,
    "unpackedSize": 117277,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcV8K9CRA9TVsSAnZWagAA0z0P/jVLpNnXrPdZvmWEm8xQ\nxb4H0CBOnQYurdWphK+wVu/mxGfMOOx2A0pPoE8E117jIyBfXmZc1PR2Jxz+\nk5tOh3a+g700qOyxlHLq9o5WSb/MpbkRReULsfVaJwkqGm9u7YBzeBIwEIIX\nDGCixyl/PPv6IW8ON6QyiZcsQ6FUaZWaFrM6KprFEreUzgaC4IgILryN/fMz\nvqbqOqRTbH5SK2WzjBtl9xKC5bcbv37o8U9/jYx6a8svM4EtUWPtG8u9sou5\nMdjjh+T2QH5pCQcISQhDaWq/2UDwuURmH6WCopHwZw4YP5lZIPYK0MbdIqLi\nPIPNW6tRS+awet+6uKRE2bstRoJleV10HniW9Cf5kueixlOVXDYAG3mNkrUd\nbc1yly7D6O3falz7ltEq7DDvHa2RZzQtZtYQNczD5BuHkSQh8ndPkbDzW5ZK\n9W/sopgOWaV40VrIcSJJvxQlb4ihHMebRu4YsCA6BHgQ8f507p+ASKvQdTQg\nDGyRojHeZ3F2HDtGeZKdEzo4CSyOQXrodK3Ykf8+cIYMUWXh0MLwGKShetUR\nl27HVoFoTryrsoO0Y6BvUqPeJcOVGSqYP92ooEMeeaPqTTn3az9ZE48BnCx+\n6rBqzi3zTHWY/v8eKYYsAwQmlnKmWyDxOi+sqItz1kFr010FCzX6ohizmR5W\nBye3\r\n=+Cjv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "98ef4693a1b4047f1e3c00cda383cade255b2d27",
  "homepage": "http://javascript.nwbox.com/nwsapi/",
  "keywords": [
    "css",
    "css3",
    "css4",
    "matcher",
    "selector"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://javascript.nwbox.com/nwsapi/MIT-LICENSE"
    }
  ],
  "main": "./src/nwsapi",
  "maintainers": [
    {
      "name": "Diego Perini",
      "email": "diego.perini@gmail.com",
      "url": "http://www.iport.it/"
    }
  ],
  "name": "nwsapi",
  "optionalDependencies": {},
  "readme": "# [NWSAPI](http://dperini.github.io/nwsapi/)\n\nFast CSS Selectors API Engine\n\n![](https://img.shields.io/npm/v/nwsapi.svg?colorB=orange&style=flat) ![](https://img.shields.io/github/tag/dperini/nwsapi.svg?style=flat) ![](https://img.shields.io/npm/dw/nwsapi.svg?style=flat) ![](https://img.shields.io/github/issues/dperini/nwsapi.svg?style=flat)\n\nNWSAPI is the development progress of [NWMATCHER](https://github.com/dperini/nwmatcher) aiming at [Selectors Level 4](https://www.w3.org/TR/selectors-4/) conformance. It has been completely reworked to be easily extended and maintained. It is a right-to-left selector parser and compiler written in pure Javascript with no external dependencies. It was initially thought as a cross browser library to improve event delegation and web page scraping in various frameworks but it has become a popular replacement of the native CSS selection and matching functionality in newer browsers and headless environments.\n\nIt uses [regular expressions](https://en.wikipedia.org/wiki/Regular_expression) to parse CSS selector strings and [metaprogramming](https://en.wikipedia.org/wiki/Metaprogramming) to transforms these selector strings into Javascript function resolvers. This process is executed only once for each selector string allowing memoization of the function resolvers and achieving unmatched performances.\n\n## Installation\n\nTo include NWSAPI in a standard web page:\n\n```html\n<script type=\"text/javascript\" src=\"nwsapi.js\"></script>\n```\n\nTo include NWSAPI in a standard web page and automatically replace the native QSA:\n\n```html\n<script type=\"text/javascript\" src=\"nwsapi.js\" onload=\"NW.Dom.install()\"></script>\n```\n\nTo use NWSAPI with Node.js:\n\n```\n$ npm install nwsapi\n```\n\nNWSAPI currently supports browsers (as a global, `NW.Dom`) and headless environments (as a CommonJS module).\n\n\n## Supported Selectors\n\nHere is a list of all the CSS2/CSS3/CSS4 [Supported selectors](https://github.com/dperini/nwsapi/wiki/CSS-supported-selectors).\n\n\n## Features and Compliance\n\nYou can read more about NWSAPI [features and compliance](https://github.com/dperini/nwsapi/wiki/Features-and-compliance) on the wiki.\n\n\n## API\n\n### DOM Selection\n\n#### `ancestor( selector, context, callback )`\n\nReturns a reference to the nearest ancestor element matching `selector`, starting at `context`. Returns `null` if no element is found. If `callback` is provided, it is invoked for the matched element.\n\n#### `first( selector, context, callback )`\n\nReturns a reference to the first element matching `selector`, starting at `context`. Returns `null` if no element matches. If `callback` is provided, it is invoked for the matched element.\n\n#### `match( selector, element, callback )`\n\nReturns `true` if `element` matches `selector`, starting at `context`; returns `false` otherwise. If `callback` is provided, it is invoked for the matched element.\n\n#### `select( selector, context, callback )`\n\nReturns an array of all the elements matching `selector`, starting at `context`; returns empty `Array` otherwise. If `callback` is provided, it is invoked for each matching element.\n\n\n### DOM Helpers\n\n#### `byId( id, from )`\n\nReturns a reference to the first element with ID `id`, optionally filtered to descendants of the element `from`.\n\n#### `byTag( tag, from )`\n\nReturns an array of elements having the specified tag name `tag`, optionally filtered to descendants of the element `from`.\n\n#### `byClass( class, from )`\n\nReturns an array of elements having the specified class name `class`, optionally filtered to descendants of the element `from`.\n\n\n### Engine Configuration\n\n#### `configure( options )`\n\nThe following is the list of currently available configuration options, their default values and descriptions, they are boolean flags that can be set to `true` or `false`:\n\n* `IDS_DUPES`: true  - true to allow using multiple elements having the same id, false to disallow\n* `LIVECACHE`: true  - true for caching both results and resolvers, false for caching only resolvers\n* `MIXEDCASE`: true  - true to match tag names case insensitive, false to match using case sensitive\n* `LOGERRORS`: true  - true to print errors and warnings to the console, false to mute both of them\n\n\n### Examples on extending the basic functionalities\n\n#### `configure( { <configuration-flag>: [ true | false ] } )`\n\nDisable logging errors/warnings to console, disallow duplicate ids. Example:\n\n```js\nNW.Dom.configure( { LOGERRORS: false, IDS_DUPES: false } );\n```\nNOTE: NW.Dom.configure() without parameters return the current configuration.\n\n#### `registerCombinator( symbol, resolver )`\n\nRegisters a new symbol and its matching resolver in the combinators table. Example:\n\n```js\nNW.Dom.registerCombinator( '^', 'e.parentElement' );\n```\n\n#### `registerOperator( symbol, resolver )`\n\nRegisters a new symbol and its matching resolver in the attribute operators table. Example:\n\n```js\nNW.Dom.registerOperator( '!=', { p1: '^', p2: '$', p3: 'false' } );\n```\n\n#### `registerSelector( name, rexp, func )`\n\nRegisters a new selector, the matching RE and the resolver function, in the selectors table. Example:\n\n```js\nNW.Dom.registerSelector('Controls', /^\\:(control)(.*)/i,\n  (function(global) {\n    return function(match, source, mode, callback) {\n      var status = true;\n      source = 'if(/^(button|input|select|textarea)/i.test(e.nodeName)){' + source + '}';\n      return { 'source': source, 'status': status };\n    };\n  })(this));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dperini/nwsapi.git"
  },
  "scripts": {
    "lint": "eslint ./src/nwsapi.js"
  },
  "version": "2.1.0"
}
